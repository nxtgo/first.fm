// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE discord_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, discordID string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, discordID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT lastfm_username
FROM users
WHERE discord_id = ?
`

func (q *Queries) GetUser(ctx context.Context, discordID string) (string, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, discordID)
	var lastfm_username string
	err := row.Scan(&lastfm_username)
	return lastfm_username, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT discord_id, lastfm_username
FROM users
WHERE lastfm_username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, lastfmUsername string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, lastfmUsername)
	var i User
	err := row.Scan(&i.DiscordID, &i.LastfmUsername)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT discord_id, lastfm_username
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.DiscordID, &i.LastfmUsername); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (discord_id, lastfm_username)
VALUES (?, ?)
ON CONFLICT(discord_id) DO UPDATE
SET lastfm_username = excluded.lastfm_username
`

type UpsertUserParams struct {
	DiscordID      string `json:"discord_id"`
	LastfmUsername string `json:"lastfm_username"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.exec(ctx, q.upsertUserStmt, upsertUser, arg.DiscordID, arg.LastfmUsername)
	return err
}
