// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM lastfm_users
WHERE guild_id = ?1 AND discord_id = ?2
`

type DeleteUserParams struct {
	GuildID   string `json:"guild_id"`
	DiscordID string `json:"discord_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, arg.GuildID, arg.DiscordID)
	return err
}

const getDiscordByUsernameAndGuild = `-- name: GetDiscordByUsernameAndGuild :one
SELECT discord_id, guild_id, username
FROM lastfm_users
WHERE username = ?1 AND guild_id = ?2
LIMIT 1
`

type GetDiscordByUsernameAndGuildParams struct {
	Username string `json:"username"`
	GuildID  string `json:"guild_id"`
}

type GetDiscordByUsernameAndGuildRow struct {
	DiscordID string `json:"discord_id"`
	GuildID   string `json:"guild_id"`
	Username  string `json:"username"`
}

func (q *Queries) GetDiscordByUsernameAndGuild(ctx context.Context, arg GetDiscordByUsernameAndGuildParams) (GetDiscordByUsernameAndGuildRow, error) {
	row := q.queryRow(ctx, q.getDiscordByUsernameAndGuildStmt, getDiscordByUsernameAndGuild, arg.Username, arg.GuildID)
	var i GetDiscordByUsernameAndGuildRow
	err := row.Scan(&i.DiscordID, &i.GuildID, &i.Username)
	return i, err
}

const getUserByDiscordID = `-- name: GetUserByDiscordID :one
SELECT username, guild_id FROM lastfm_users
WHERE discord_id = ?1
LIMIT 1
`

type GetUserByDiscordIDRow struct {
	Username string `json:"username"`
	GuildID  string `json:"guild_id"`
}

func (q *Queries) GetUserByDiscordID(ctx context.Context, discordID string) (GetUserByDiscordIDRow, error) {
	row := q.queryRow(ctx, q.getUserByDiscordIDStmt, getUserByDiscordID, discordID)
	var i GetUserByDiscordIDRow
	err := row.Scan(&i.Username, &i.GuildID)
	return i, err
}

const getUserByDiscordIDAndGuild = `-- name: GetUserByDiscordIDAndGuild :one
SELECT discord_id, guild_id, username
FROM lastfm_users
WHERE discord_id = ?1 AND guild_id = ?2
LIMIT 1
`

type GetUserByDiscordIDAndGuildParams struct {
	DiscordID string `json:"discord_id"`
	GuildID   string `json:"guild_id"`
}

type GetUserByDiscordIDAndGuildRow struct {
	DiscordID string `json:"discord_id"`
	GuildID   string `json:"guild_id"`
	Username  string `json:"username"`
}

func (q *Queries) GetUserByDiscordIDAndGuild(ctx context.Context, arg GetUserByDiscordIDAndGuildParams) (GetUserByDiscordIDAndGuildRow, error) {
	row := q.queryRow(ctx, q.getUserByDiscordIDAndGuildStmt, getUserByDiscordIDAndGuild, arg.DiscordID, arg.GuildID)
	var i GetUserByDiscordIDAndGuildRow
	err := row.Scan(&i.DiscordID, &i.GuildID, &i.Username)
	return i, err
}

const getUsersByGuild = `-- name: GetUsersByGuild :many
SELECT discord_id, username FROM lastfm_users
WHERE guild_id = ?1
`

type GetUsersByGuildRow struct {
	DiscordID string `json:"discord_id"`
	Username  string `json:"username"`
}

func (q *Queries) GetUsersByGuild(ctx context.Context, guildID string) ([]GetUsersByGuildRow, error) {
	rows, err := q.query(ctx, q.getUsersByGuildStmt, getUsersByGuild, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByGuildRow
	for rows.Next() {
		var i GetUsersByGuildRow
		if err := rows.Scan(&i.DiscordID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO lastfm_users (guild_id, discord_id, username)
VALUES (?1, ?2, ?3)
ON CONFLICT(guild_id, discord_id) DO UPDATE SET username = excluded.username
`

type InsertUserParams struct {
	GuildID   string `json:"guild_id"`
	DiscordID string `json:"discord_id"`
	Username  string `json:"username"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser, arg.GuildID, arg.DiscordID, arg.Username)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE lastfm_users
SET username = ?3
WHERE discord_id = ?1 AND guild_id = ?2
`

type UpdateUsernameParams struct {
	DiscordID string `json:"discord_id"`
	GuildID   string `json:"guild_id"`
	Username  string `json:"username"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.exec(ctx, q.updateUsernameStmt, updateUsername, arg.DiscordID, arg.GuildID, arg.Username)
	return err
}
