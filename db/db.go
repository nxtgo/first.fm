// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getDiscordByUsernameAndGuildStmt, err = db.PrepareContext(ctx, getDiscordByUsernameAndGuild); err != nil {
		return nil, fmt.Errorf("error preparing query GetDiscordByUsernameAndGuild: %w", err)
	}
	if q.getUserByDiscordIDStmt, err = db.PrepareContext(ctx, getUserByDiscordID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByDiscordID: %w", err)
	}
	if q.getUserByDiscordIDAndGuildStmt, err = db.PrepareContext(ctx, getUserByDiscordIDAndGuild); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByDiscordIDAndGuild: %w", err)
	}
	if q.getUsersByGuildStmt, err = db.PrepareContext(ctx, getUsersByGuild); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByGuild: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.updateUsernameStmt, err = db.PrepareContext(ctx, updateUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUsername: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getDiscordByUsernameAndGuildStmt != nil {
		if cerr := q.getDiscordByUsernameAndGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDiscordByUsernameAndGuildStmt: %w", cerr)
		}
	}
	if q.getUserByDiscordIDStmt != nil {
		if cerr := q.getUserByDiscordIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByDiscordIDStmt: %w", cerr)
		}
	}
	if q.getUserByDiscordIDAndGuildStmt != nil {
		if cerr := q.getUserByDiscordIDAndGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByDiscordIDAndGuildStmt: %w", cerr)
		}
	}
	if q.getUsersByGuildStmt != nil {
		if cerr := q.getUsersByGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByGuildStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.updateUsernameStmt != nil {
		if cerr := q.updateUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUsernameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	deleteUserStmt                   *sql.Stmt
	getDiscordByUsernameAndGuildStmt *sql.Stmt
	getUserByDiscordIDStmt           *sql.Stmt
	getUserByDiscordIDAndGuildStmt   *sql.Stmt
	getUsersByGuildStmt              *sql.Stmt
	insertUserStmt                   *sql.Stmt
	updateUsernameStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		deleteUserStmt:                   q.deleteUserStmt,
		getDiscordByUsernameAndGuildStmt: q.getDiscordByUsernameAndGuildStmt,
		getUserByDiscordIDStmt:           q.getUserByDiscordIDStmt,
		getUserByDiscordIDAndGuildStmt:   q.getUserByDiscordIDAndGuildStmt,
		getUsersByGuildStmt:              q.getUsersByGuildStmt,
		insertUserStmt:                   q.insertUserStmt,
		updateUsernameStmt:               q.updateUsernameStmt,
	}
}
