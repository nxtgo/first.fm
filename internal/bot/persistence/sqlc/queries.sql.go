// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, lastfm_username, created_at
FROM users
WHERE user_id = ?1
`

func (q *Queries) GetUserByID(ctx context.Context, userID string) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i User
	err := row.Scan(&i.UserID, &i.LastfmUsername, &i.CreatedAt)
	return i, err
}

const getUserByLastFM = `-- name: GetUserByLastFM :one
SELECT user_id, lastfm_username, created_at
FROM users
WHERE lastfm_username = ?1
`

func (q *Queries) GetUserByLastFM(ctx context.Context, lastfmUsername string) (User, error) {
	row := q.queryRow(ctx, q.getUserByLastFMStmt, getUserByLastFM, lastfmUsername)
	var i User
	err := row.Scan(&i.UserID, &i.LastfmUsername, &i.CreatedAt)
	return i, err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (user_id, lastfm_username)
VALUES (?1, ?2)
ON CONFLICT(user_id) DO UPDATE SET lastfm_username = excluded.lastfm_username
`

type UpsertUserParams struct {
	UserID         string
	LastfmUsername string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.exec(ctx, q.upsertUserStmt, upsertUser, arg.UserID, arg.LastfmUsername)
	return err
}
